package com.cybershield;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.net.UnknownHostException;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

/**
 * OWASP Top 10 Vulnerability Scanner Servlet
 * This servlet checks for common security vulnerabilities based on the OWASP Top 10 list
 * and displays the results directly in the web browser.
 */
@WebServlet("/vulnerability")
public class OWASPVulnerabilityScanner extends HttpServlet {
    private static final int TIMEOUT = 5000; // Connection timeout in milliseconds
    private static final Map<String, String> commonPaths = new HashMap<>();
    private static final List<String> injectionPayloads = new ArrayList<>();
    
    static {
        // Initialize common paths to check
    	commonPaths.put("bank/main.jsp", "main file");
        commonPaths.put("admin", "Admin panel");
        commonPaths.put("login", "Login page");        commonPaths.put("wp-admin", "WordPress admin");
        commonPaths.put("phpmyadmin", "phpMyAdmin");
        commonPaths.put("config", "Configuration file");
        commonPaths.put("backup", "Backup files");
        commonPaths.put(".git", "Git repository");
        commonPaths.put(".env", "Environment file");
        
        // Initialize SQL injection payloads
        injectionPayloads.add("' OR '1'='1");
        injectionPayloads.add("1' OR '1' = '1' --");
        injectionPayloads.add("' UNION SELECT * FROM users --");
        injectionPayloads.add("<script>alert('XSS')</script>");
        injectionPayloads.add("../../etc/passwd");
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        
        // Get target URL from request parameter, default to the current server if not provided
        String targetUrl = request.getParameter("input");
        if (targetUrl == null || targetUrl.isEmpty()) {
            String serverName = request.getServerName();
            int serverPort = request.getServerPort();
            String scheme = request.getScheme();
            
            targetUrl = scheme + "://" + serverName;
            if (("http".equals(scheme) && serverPort != 80) || 
                ("https".equals(scheme) && serverPort != 443)) {
                targetUrl += ":" + serverPort;
            }
        }
        
        if (!targetUrl.startsWith("http://") && !targetUrl.startsWith("https://")) {
            targetUrl = "http://" + targetUrl;
        }
        
        // Start HTML output
        writeHtmlHeader(out, targetUrl);
        
        // Check if the URL is valid before proceeding with the scan
        boolean isValidUrl = isValidUrl(targetUrl);
        
        if (!isValidUrl) {
            // Display error message for invalid URL
            out.println("<div class='error-section'>");
            out.println("<h2>❌ Invalid URL or Website Not Reachable</h2>");
            out.println("<p>The URL you entered <strong>" + targetUrl + "</strong> appears to be invalid or the website cannot be reached.</p>");
            out.println("<p>Please check the URL and ensure the website is online and accessible.</p>");
            out.println("<ul class='error-tips'>");
            out.println("<li>Verify the domain name spelling</li>");
            out.println("<li>Make sure the website is publicly accessible</li>");
            out.println("<li>Check your internet connection</li>");
            out.println("<li>Try adding or removing 'www' from the URL</li>");
            out.println("</ul>");
            out.println("</div>");
            
            writeHtmlFooter(out);
            return;
        }
        
        boolean hasVulnerabilities = false;
        
        try {
            // Configure SSL to trust all certificates
            trustAllCertificates();
            
            // A01: Broken Access Control
            boolean a01 = checkBrokenAccessControl(targetUrl, out);
            if (a01) {
                out.println("<div class='summary-item warning'>⚠️ A01: Broken Access Control - Vulnerabilities Found!</div>");
                hasVulnerabilities = true;
            } else {
                out.println("<div class='summary-item safe'>✅ A01: No Broken Access Control vulnerabilities detected.</div>");
            }

            // A02: Cryptographic Failures
            boolean a02 = checkCryptographicFailures(targetUrl, out);
            if (a02) {
                out.println("<div class='summary-item warning'>⚠️ A02: Cryptographic Failures - Vulnerabilities Found!</div>");
                hasVulnerabilities = true;
            } else {
                out.println("<div class='summary-item safe'>✅ A02: No Cryptographic Failures detected.</div>");
            }
            
            // Scan summary
            out.println("<div class='section'>");
            out.println("<h2>Scan Summary</h2>");
            out.println("<div class='timestamp'>Scan completed at: " + new java.util.Date() + "</div>");
            
            if (hasVulnerabilities) {
                out.println("<div class='vulnerability-warning'>");
                out.println("<h3>⚠️ Vulnerabilities were detected! Please check the detailed results above.</h3>");
                out.println("</div>");
            } else {
                out.println("<div class='vulnerability-safe'>");
                out.println("<h3>✅ No vulnerabilities detected in the scanned categories.</h3>");
                out.println("</div>");
            }
            
            out.println("<p class='note'>Note: This is a basic scan. For comprehensive security assessment, please use professional tools.</p>");
            out.println("</div>");
            
        } catch (Exception e) {
            out.println("<div class='error-section'>");
            out.println("<h2>❌ An unexpected error occurred during the scan</h2>");
            out.println("<p>" + e.getMessage() + "</p>");
            out.println("</div>");
        }
        
        writeHtmlFooter(out);
    }
    
    // Check if URL is valid and website is reachable
    private boolean isValidUrl(String urlString) {
        try {
            URL url = new URL(urlString);
            HttpURLConnection conn = getConnectionWithoutProxy(url);
            conn.setConnectTimeout(TIMEOUT);
            conn.setReadTimeout(TIMEOUT);
            conn.setRequestMethod("HEAD");
            
            int responseCode = conn.getResponseCode();
            // Consider any response in 200-399 range as successful
            return responseCode >= 200 && responseCode < 400;
        } catch (UnknownHostException e) {
            // Unknown host - domain doesn't exist or can't be resolved
            return false;
        } catch (IOException e) {
            // Other connectivity issues
            return false;
        } catch (Exception e) {
            // Any other exceptions
            return false;
        }
    }
    
    // Write HTML header with CSS styling
    private void writeHtmlHeader(PrintWriter out, String targetUrl) {
        out.println("<!DOCTYPE html>");
        out.println("<html lang='en'>");
        out.println("<head>");
        out.println("    <meta charset='UTF-8'>");
        out.println("    <meta name='viewport' content='width=device-width, initial-scale=1.0'>");
        out.println("    <title>OWASP Top 10 Vulnerability Scan Results</title>");
        out.println("    <link rel='preconnect' href='https://fonts.googleapis.com'>");
        out.println("    <link rel='preconnect' href='https://fonts.gstatic.com' crossorigin>");
        out.println("    <link href='https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap' rel='stylesheet'>");
        out.println("    <style>");
        out.println("        body {");
        out.println("            font-family: 'Inter', 'Segoe UI', system-ui, -apple-system, sans-serif;");
        out.println("            background-color: #16213e;");
        out.println("            color: white;");
        out.println("            margin: 0;");
        out.println("            padding: 0;");
        out.println("            line-height: 1.6;");
        out.println("        }");
        out.println("        .container {");
        out.println("            max-width: 1000px;");
        out.println("            margin: 0 auto;");
        out.println("            padding: 25px;");
        out.println("        }");
        out.println("        h1, h2 {");
        out.println("            text-align: center;");
        out.println("        }");
        out.println("        .header {");
        out.println("            margin-bottom: 40px;");
        out.println("            padding-bottom: 25px;");
        out.println("            border-bottom: 1px solid rgba(255, 255, 255, 0.15);");
        out.println("            text-align: center;");
        out.println("        }");
        out.println("        .header h1 {");
        out.println("            font-size: 2.2rem;");
        out.println("            font-weight: 700;");
        out.println("            margin-bottom: 10px;");
        out.println("            background: linear-gradient(45deg, #4facfe 0%, #00f2fe 100%);");
        out.println("            -webkit-background-clip: text;");
        out.println("            -webkit-text-fill-color: transparent;");
        out.println("            background-clip: text;");
        out.println("        }");
        out.println("        .header h2 {");
        out.println("            font-size: 1.3rem;");
        out.println("            font-weight: 500;");
        out.println("            color: #e0e0e0;");
        out.println("            margin-top: 15px;");
        out.println("        }");
        out.println("        .section {");
        out.println("            background-color: rgba(0, 0, 0, 0.2);");
        out.println("            border-radius: 12px;");
        out.println("            padding: 20px;");
        out.println("            margin-bottom: 25px;");
        out.println("            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);");
        out.println("        }");
        out.println("        .section-title {");
        out.println("            font-size: 1.3em;");
        out.println("            font-weight: 600;");
        out.println("            border-bottom: 1px solid rgba(255, 255, 255, 0.15);");
        out.println("            padding-bottom: 12px;");
        out.println("            margin-bottom: 15px;");
        out.println("            color: #e0e0e0;");
        out.println("        }");
        out.println("        .vulnerability-item {");
        out.println("            margin: 12px 0;");
        out.println("            padding: 10px;");
        out.println("            border-radius: 6px;");
        out.println("        }");
        out.println("        .vulnerability-warning {");
        out.println("            background-color: rgba(255, 87, 51, 0.15);");
        out.println("            border-left: 4px solid #ff5733;");
        out.println("            padding: 15px;");
        out.println("            margin: 12px 0;");
        out.println("            border-radius: 6px;");
        out.println("        }");
        out.println("        .vulnerability-safe {");
        out.println("            background-color: rgba(76, 175, 80, 0.15);");
        out.println("            border-left: 4px solid #4CAF50;");
        out.println("            padding: 15px;");
        out.println("            margin: 12px 0;");
        out.println("            border-radius: 6px;");
        out.println("        }");
        out.println("        .timestamp {");
        out.println("            font-style: italic;");
        out.println("            text-align: center;");
        out.println("            font-size: 0.9em;");
        out.println("            margin: 15px 0;");
        out.println("            color: #b0b0b0;");
        out.println("        }");
        out.println("        .target-form {");
        out.println("            margin: 30px 0;");
        out.println("            display: flex;");
        out.println("            justify-content: center;");
        out.println("        }");
        out.println("        .target-form form {");
        out.println("            display: flex;");
        out.println("            width: 80%;");
        out.println("            max-width: 700px;");
        out.println("        }");
        out.println("        .target-form input[type=text] {");
        out.println("            flex: 1;");
        out.println("            padding: 12px 16px;");
        out.println("            border-radius: 6px 0 0 6px;");
        out.println("            border: 1px solid rgba(255, 255, 255, 0.1);");
        out.println("            background-color: rgba(255, 255, 255, 0.1);");
        out.println("            color: white;");
        out.println("            font-size: 16px;");
        out.println("            transition: all 0.3s ease;");
        out.println("        }");
        out.println("        .target-form input[type=text]:focus {");
        out.println("            outline: none;");
        out.println("            background-color: rgba(255, 255, 255, 0.15);");
        out.println("            box-shadow: 0 0 0 2px rgba(79, 172, 254, 0.5);");
        out.println("        }");
        out.println("        .target-form input[type=submit] {");
        out.println("            padding: 12px 24px;");
        out.println("            background: linear-gradient(45deg, #4facfe 0%, #00f2fe 100%);");
        out.println("            color: white;");
        out.println("            border: none;");
        out.println("            border-radius: 0 6px 6px 0;");
        out.println("            cursor: pointer;");
        out.println("            font-weight: 600;");
        out.println("            transition: all 0.3s ease;");
        out.println("        }");
        out.println("        .target-form input[type=submit]:hover {");
        out.println("            background: linear-gradient(45deg, #3d9cef 0%, #00dfe9 100%);");
        out.println("            transform: translateY(-1px);");
        out.println("        }");
        out.println("        .summary-item {");
        out.println("            padding: 15px;");
        out.println("            margin: 10px 0;");
        out.println("            border-radius: 6px;");
        out.println("            font-weight: 500;");
        out.println("        }");
        out.println("        .warning {");
        out.println("            background-color: rgba(255, 87, 51, 0.15);");
        out.println("            border-left: 4px solid #ff5733;");
        out.println("        }");
        out.println("        .safe {");
        out.println("            background-color: rgba(76, 175, 80, 0.15);");
        out.println("            border-left: 4px solid #4CAF50;");
        out.println("        }");
        out.println("        .note {");
        out.println("            font-style: italic;");
        out.println("            text-align: center;");
        out.println("            color: #b0b0b0;");
        out.println("            margin-top: 20px;");
        out.println("        }");
        out.println("        .error-section {");
        out.println("            background-color: rgba(255, 0, 0, 0.15);");
        out.println("            padding: 20px;");
        out.println("            border-radius: 12px;");
        out.println("            margin-top: 25px;");
        out.println("            text-align: center;");
        out.println("            border-left: 4px solid #ff0033;");
        out.println("        }");
        out.println("        .error-tips {");
        out.println("            text-align: left;");
        out.println("            display: inline-block;");
        out.println("            margin: 20px auto;");
        out.println("            padding-left: 20px;");
        out.println("        }");
        out.println("        .error-tips li {");
        out.println("            margin-bottom: 8px;");
        out.println("            color: #e0e0e0;");
        out.println("        }");
        out.println("        h3 {");
        out.println("            margin-top: 5px;");
        out.println("            font-weight: 600;");
        out.println("        }");
        out.println("        .fix-info {");
        out.println("            background-color: rgba(79, 195, 247, 0.15);");
        out.println("            border-left: 4px solid #4fc3f7;");
        out.println("            padding: 10px 15px;");
        out.println("            margin: 8px 0;");
        out.println("            border-radius: 6px;");
        out.println("            font-size: 0.9em;");
        out.println("        }");
        out.println("        .fix-info h4 {");
        out.println("            margin: 5px 0;");
        out.println("            font-size: 1em;");
        out.println("        }");
        out.println("        .fix-info ul {");
        out.println("            margin: 5px 0;");
        out.println("            padding-left: 20px;");
        out.println("        }");
        out.println("        .fix-info a {");
        out.println("            color: #4fc3f7;");
        out.println("            text-decoration: none;");
        out.println("        }");
        out.println("        .fix-info a:hover {");
        out.println("            text-decoration: underline;");
        out.println("        }");
        out.println("    </style>");
        out.println("</head>");
        out.println("<body>");
        out.println("    <div class='container'>");
        out.println("        <div class='header'>");
        out.println("            <h1>🔍 OWASP Top 10 Vulnerability Scanner</h1>");
        out.println("            <div class='target-form'>");
        out.println("                <form method='get'>");
        out.println("                    <input type='text' name='input' placeholder='Enter target URL (e.g., example.com)' value='" + targetUrl + "'>");
        out.println("                    <input type='submit' value='Scan'>");
        out.println("                </form>");
        out.println("            </div>");
        out.println("            <h2>Target: " + targetUrl + "</h2>");
        out.println("            <p class='timestamp'>Scan started at: " + new java.util.Date() + "</p>");
        out.println("        </div>");
    }
    
    // Write HTML footer
    private void writeHtmlFooter(PrintWriter out) {
        out.println("    </div>");
        out.println("</body>");
        out.println("</html>");
    }

    // A01: Broken Access Control
    private boolean checkBrokenAccessControl(String targetUrl, PrintWriter out) {
        boolean vulnerabilityFound = false;
        
        out.println("<div class='section'>");
        out.println("<div class='section-title'>🔍 A01: Broken Access Control</div>");
        
        for (Map.Entry<String, String> path : commonPaths.entrySet()) {
            try {
                URL url = new URL(targetUrl + "/" + path.getKey());
                HttpURLConnection conn = getConnectionWithoutProxy(url);
                conn.setRequestMethod("GET");
                conn.setConnectTimeout(TIMEOUT);
                conn.setReadTimeout(TIMEOUT);
                
                int code = conn.getResponseCode();
                if (code == 200) {
                    out.println("<div class='vulnerability-warning'>");
                    out.println("⚠️ Found accessible sensitive endpoint: " + path.getValue() + 
                               " at " + url.toString());
                    out.println("</div>");
                    
                    // Add common causes and fixing techniques
                    out.println("<div class='fix-info'>");
                    out.println("<h4>Common Causes:</h4>");
                    out.println("<ul>");
                    out.println("<li>Missing access controls for sensitive directories</li>");
                    out.println("<li>Improper authorization checks</li>");
                    out.println("<li>Default configurations that expose sensitive resources</li>");
                    out.println("</ul>");
                    
                    out.println("<h4>How to Fix:</h4>");
                    out.println("<ul>");
                    out.println("<li>Implement proper authentication and authorization checks</li>");
                    out.println("<li>Use the principle of least privilege</li>");
                    out.println("<li>Configure server to deny access to sensitive paths</li>");
                    out.println("<li>Implement proper access control models like RBAC</li>");
                    out.println("</ul>");
                    
                    out.println("<p>Learn more: <a href='https://owasp.org/Top10/A01_2021-Broken_Access_Control/' target='_blank'>OWASP A01:2021 – Broken Access Control</a></p>");
                    out.println("</div>");
                    
                    vulnerabilityFound = true;
                }
            } catch (IOException e) {
                // Silently continue checking other paths
            }
        }
        
        if (!vulnerabilityFound) {
            out.println("<div class='vulnerability-safe'>");
            out.println("✅ No Broken Access Control vulnerabilities detected.");
            out.println("</div>");
        }
        
        out.println("</div>");
        return vulnerabilityFound;
    }

    // A02: Cryptographic Failures
    private boolean checkCryptographicFailures(String targetUrl, PrintWriter out) {
        boolean vulnerabilityFound = false;
        
        out.println("<div class='section'>");
        out.println("<div class='section-title'>🔍 A02: Cryptographic Failures</div>");
        
        // Check if HTTPS is used
        if (!targetUrl.startsWith("https://")) {
            out.println("<div class='vulnerability-warning'>");
            out.println("⚠️ Site is using HTTP instead of HTTPS");
            out.println("</div>");
            
            // Add common causes and fixing techniques
            out.println("<div class='fix-info'>");
            out.println("<h4>Common Causes:</h4>");
            out.println("<ul>");
            out.println("<li>Lack of SSL/TLS implementation</li>");
            out.println("<li>Data transmitted in clear text</li>");
            out.println("<li>Not enforcing HTTPS for all connections</li>");
            out.println("</ul>");
            
            out.println("<h4>How to Fix:</h4>");
            out.println("<ul>");
            out.println("<li>Implement HTTPS across the entire website</li>");
            out.println("<li>Obtain and install a valid SSL/TLS certificate</li>");
            out.println("<li>Configure HSTS (HTTP Strict Transport Security)</li>");
            out.println("<li>Redirect all HTTP traffic to HTTPS</li>");
            out.println("</ul>");
            
            out.println("<p>Learn more: <a href='https://owasp.org/Top10/A02_2021-Cryptographic_Failures/' target='_blank'>OWASP A02:2021 – Cryptographic Failures</a></p>");
            out.println("</div>");
            
            vulnerabilityFound = true;
        } else {
            // Check SSL/TLS configuration
            try {
                URL url = new URL(targetUrl);
                HttpsURLConnection conn = (HttpsURLConnection) getConnectionWithoutProxy(url);
                conn.setConnectTimeout(TIMEOUT);
                conn.setReadTimeout(TIMEOUT);
                
                conn.connect();
                Certificate[] certs = conn.getServerCertificates();
                if (certs.length > 0 && certs[0] instanceof X509Certificate) {
                    X509Certificate cert = (X509Certificate) certs[0];
                    out.println("<div class='vulnerability-item'>");
                    out.println("✅ SSL Certificate: " + cert.getSubjectX500Principal().getName());
                    out.println("</div>");
                    
                    // Check if certificate is valid
                    try {
                        cert.checkValidity();
                        out.println("<div class='vulnerability-safe'>");
                        out.println("✅ Certificate is valid");
                        out.println("</div>");
                    } catch (Exception e) {
                        out.println("<div class='vulnerability-warning'>");
                        out.println("⚠️ Invalid certificate: " + e.getMessage());
                        out.println("</div>");
                        
                        // Add common causes and fixing techniques for invalid certificates
                        out.println("<div class='fix-info'>");
                        out.println("<h4>Common Causes:</h4>");
                        out.println("<ul>");
                        out.println("<li>Expired SSL/TLS certificate</li>");
                        out.println("<li>Self-signed certificate in production</li>");
                        out.println("<li>Certificate not issued by a trusted CA</li>");
                        out.println("</ul>");
                        
                        out.println("<h4>How to Fix:</h4>");
                        out.println("<ul>");
                        out.println("<li>Renew expired certificates</li>");
                        out.println("<li>Purchase and install a valid certificate from a trusted CA</li>");
                        out.println("<li>Set up automated certificate renewal processes</li>");
                        out.println("</ul>");
                        
                        out.println("<p>Learn more: <a href='https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_SSL_TLS_Ciphers_Insufficient_Transport_Layer_Protection' target='_blank'>OWASP Testing for Weak SSL/TLS</a></p>");
                        out.println("</div>");
                        
                        vulnerabilityFound = true;
                    }
                }
                
            } catch (IOException e) {
                out.println("<div class='vulnerability-warning'>");
                out.println("⚠️ Error checking SSL/TLS: " + e.getMessage());
                out.println("</div>");
            }
        }
        
        // Check for sensitive data in login pages
        try {
            URL url = new URL(targetUrl + "/login");
            HttpURLConnection conn = getConnectionWithoutProxy(url);
            conn.setRequestMethod("GET");
            conn.setConnectTimeout(TIMEOUT);
            conn.setReadTimeout(TIMEOUT);
            
            int code = conn.getResponseCode();
            if (code == 200) {
                BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String line;
                while ((line = reader.readLine()) != null) {
                    if (line.toLowerCase().contains("password") && !line.toLowerCase().contains("type=\"password\"")) {
                        out.println("<div class='vulnerability-warning'>");
                        out.println("⚠️ Possible plaintext password field detected");
                        out.println("</div>");
                        
                        // Add common causes and fixing techniques
                        out.println("<div class='fix-info'>");
                        out.println("<h4>Common Causes:</h4>");
                        out.println("<ul>");
                        out.println("<li>Using text fields instead of password fields for sensitive data</li>");
                        out.println("<li>Not masking password input</li>");
                        out.println("<li>Storing or transmitting passwords in plaintext</li>");
                        out.println("</ul>");
                        
                        out.println("<h4>How to Fix:</h4>");
                        out.println("<ul>");
                        out.println("<li>Always use type=\"password\" for password input fields</li>");
                        out.println("<li>Hash passwords before storing them</li>");
                        out.println("<li>Use HTTPS to protect data in transit</li>");
                        out.println("<li>Implement proper password policies</li>");
                        out.println("</ul>");
                        
                        out.println("<p>Learn more: <a href='https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Password_Policy' target='_blank'>OWASP Testing for Weak Password Policy</a></p>");
                        out.println("</div>");
                        
                        vulnerabilityFound = true;
                    }
                }
            }
        } catch (IOException e) {
            // Silently continue
        }
        
        if (!vulnerabilityFound) {
            out.println("<div class='vulnerability-safe'>");
            out.println("✅ No Cryptographic Failures detected.");
            out.println("</div>");
        }
        
        out.println("</div>");
        return vulnerabilityFound;
    }
    // Helper method to get connection without proxy
    private static HttpURLConnection getConnectionWithoutProxy(URL url) throws IOException {
        try {
            return (HttpURLConnection) url.openConnection(Proxy.NO_PROXY);
        } catch (IOException e) {
            if (e.getMessage() != null && e.getMessage().contains("proxy")) {
                // Try with system property
                System.setProperty("java.net.useSystemProxies", "false");
                return (HttpURLConnection) url.openConnection();
            } else {
                throw e;
            }
        }
    }
    
    // Configure SSL to trust all certificates (for testing purposes only)
    private static void trustAllCertificates() {
        try {
            TrustManager[] trustAllCerts = new TrustManager[] { 
                new X509TrustManager() {
                    public java.security.cert.X509Certificate[] getAcceptedIssuers() { return null; }
                    public void checkClientTrusted(X509Certificate[] certs, String authType) { }
                    public void checkServerTrusted(X509Certificate[] certs, String authType) { }
                }
            };
            
            SSLContext sc = SSLContext.getInstance("SSL");
            sc.init(null, trustAllCerts, new java.security.SecureRandom());
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            HttpsURLConnection.setDefaultHostnameVerifier((hostname, session) -> true);
        } catch (Exception e) {
            System.out.println("Error configuring SSL: " + e.getMessage());
        }
    }
}